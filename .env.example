# ==============================================================================
# DAPP RANKING INDEXER CONFIGURATION
# ==============================================================================

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# PostgreSQL connection string (REQUIRED)
# Format: postgresql://username:password@host:port/database_name
# Example for local development:
DATABASE_URL=postgresql://postgres:password@localhost:5432/dapp_ranking
# Example for production:
# DATABASE_URL=postgresql://user:secure_password@db.example.com:5432/dapp_ranking

# ==============================================================================
# SUI NETWORK CONFIGURATION
# ==============================================================================

# Sui RPC endpoint (optional - has default)
# Default: https://fullnode.mainnet.sui.io:443
RPC_URL=https://fullnode.mainnet.sui.io:443

# Remote storage URL for downloading checkpoints
# If not provided, assumes checkpoints are available locally
REMOTE_STORAGE=https://checkpoints.mainnet.sui.io

# Directory where checkpoints are stored/downloaded
# Default: ./checkpoints
CHECKPOINTS_DIR=./checkpoints

# Path to backfill progress tracking file
# Used to resume processing from the last checkpoint after restarts
BACKFILL_PROGRESS_FILE_PATH=./backfill_progress/backfill_progress

# ==============================================================================
# OPERATIONAL SETTINGS
# ==============================================================================

# Update interval for ranking calculation (in seconds)
# How often the background job updates rankings and saves to database
# Default: 600 (10 minutes)
UPDATE_INTERVAL_SECONDS=600

# Interaction retention period (in hours)
# How long to keep interactions in memory for 24h calculations
# Default: 25 (gives buffer over 24h)
INTERACTION_RETENTION_HOURS=25

# Checkpoint batch size
# How many checkpoints to process before forcing a database update
# Default: 10
CHECKPOINT_BATCH_SIZE=10

# ==============================================================================
# RUNTIME CONTROL
# ==============================================================================

# Enable/disable database functionality
# Set to "true" for production, "false" for testing without database
USE_DATABASE=true

# Starting checkpoint number (optional)
# If not provided, resumes from last processed checkpoint
# STARTING_CHECKPOINT=12345678

# ==============================================================================
# EXAMPLE USAGE
# ==============================================================================

# 1. Copy this file to .env: cp .env.example .env
# 2. Update DATABASE_URL with your PostgreSQL connection details
# 3. Run: ./run_dapp_indexer.sh (to start indexer)

# ==============================================================================
# LOGGING CONFIGURATION (Optional)
# ==============================================================================

# Rust logging level (OPTIONAL)
# Controls the verbosity of application logs
# Options: error, warn, info, debug, trace
# Default: info
#
# Levels explained:
# - error: Only critical errors
# - warn: Warnings and errors
# - info: General operation info, warnings, and errors (recommended)
# - debug: Detailed debugging info (verbose)
# - trace: Very detailed tracing (very verbose, performance impact)
#
RUST_LOG=info

# ==============================================================================
# DEVELOPMENT/TESTING OPTIONS
# ==============================================================================

# Test mode flag (OPTIONAL - development only)
# Set to "true" to enable test mode with mock data
# Default: false
# WARNING: Only use in development/testing environments
#
# TEST_MODE=false

# Mock price feeds (OPTIONAL - development only)  
# Set to "true" to use mock prices instead of Pyth Network
# Useful when Pyth Network is unavailable or for testing
# Default: false
#
# USE_MOCK_PRICES=false

# ==============================================================================
# SECURITY NOTES
# ==============================================================================
#
# 1. Never commit .env files with real credentials to version control
# 2. Use strong, unique passwords for database connections
# 3. In production, consider using environment variable injection instead of .env files
# 4. Regularly rotate database passwords and API keys
# 5. Ensure proper network security for database connections
# 6. Monitor API usage to avoid rate limiting
#
# ==============================================================================

# ==============================================================================
# QUICK START CHECKLIST
# ==============================================================================
#
# Before running the indexer, ensure you have:
# 
# ✅ PostgreSQL database running and accessible
# ✅ Database user with proper permissions (CREATE, INSERT, UPDATE, SELECT)
# ✅ Valid SUI_USDC_POOL_ID from Cetus DEX  
# ✅ Valid CETUS_ADDRESS from Sui blockchain
# ✅ Internet connection for Pyth Network price feeds
# ✅ Sufficient disk space for checkpoints (if using local storage)
# ✅ Proper file permissions for progress tracking
#
# Test your configuration:
# 1. Run: cargo check (to verify code compilation)
# 2. Run: psql $DATABASE_URL -c "SELECT version();" (to test database)
# 3. Run: cargo run --bin cetus_checkpoint_processor (to start indexer)
#
# ============================================================================== 